Hi,

This text document will contain all of the notes that I write
while reading through 'The Rust Programming Language'. I'll 
split em up by chapter. The rest of the documents in this repo
will be code snippets and projects from the book. Each chapter 
will have it's own directory and that'll contain all of the code
from that chapter. Okay? Okay.

---------
Chapter 1
---------

1.2:
Rust files always have the .rs extension
To compile a rust file use the command rustc. For example...

$ rustc main.rs

Then you run just like a compiled c program

$ ./main
$ Hello, world!

Like in many programming language, main is always the first code ..
that runs in a Rust programs. There are no parameters, but if there ..
were they would reside inside the parens

Like C and others, function bodies are wrapped in curlies. It's ..
good style to put the first curly on the same line as the function ..
declaration

You can use the rustfmt tool to automatically format to Rust's ..
weirdo specifications. [I've installed a vim package for Rust 
that allows this to be done as a command. Simply type :"RustFmt"]

println! calls a Rust macro. If it called a function instead we would ..
omit the ! at the end of println. This is discussed more in chapter 19

"Hello, world!" is a string and we end expressions with a semicolon

Before running a Rust program we have to compile it with Rust's ..
editor rustc while passing the name of the source file. Dynamic ..
languages like Python, Ruby, and JavaScript don't do this. 

Rust is an ahead-of-time compiled language, meaning I can compile ..
a program and give the executable to someone else and they ..
can run it on their machine without having Rust installed

Compiling with rustc is fine for small/simple programs, but as the ..
project grows, we'll want to be able to manage all of the options ..
and make it easier to share code. Rust's Cargo tool will help write ..
real-world Rust programs

1.3

Cargo is Rust's build system and package manager. Cargo handles
a lot of stuff for us including ...
1. Building the code
2. Downloading the libraries our code needs
3. Building those libraries (called dependencies)

The vast majority of Rust projects use Cargo

To create a new project using Cargo you type the following into 
the terminal ...

$ cargo new <project_name>

This command does a few things
1. It creates a new directory named project_name
2. It generates two files and a directory
    i. A toml file used for configuration of the project
    ii. A src directory beneath project_name
    iii. Inside here lies a hello_world starter file
3. It initializes a git repo (unless you're already in one)

For the toml file there are a few things to note
1. The first line [package] is a section heading that indicates 
that the following statements are configuring a package. As the
program grows, so too does the number of headings.

The next lines of information detail the information that Cargo 
needs to compile the program. The name, version, who wrote it, and 
edition of Rust to use. 

The last line is a section for the dependencies. In Rust, packages
of code are known as crates. You'll list these here when we need them

Cargo expects the source files for the program to exist within
the src directory. The top-level project directory is just for
README files, license information, configuration files, and 
other things not strictly related to the code. 

"There's a place for everything, and everything is in its place"

The Cargo new command doesn't do anything else special. If you
didn't use it, you can just put the main.rs into a src directory
and create a Cargo.toml file and no one will know ;)

Building and running a cargo project is slightly different than 
before. From the project directory you build the project by typing ...

$ cargo build
   Compiling hello_cargo v0.1.0 (file:///projects/hello_cargo)
   Finished dev [unoptimized + debuginfo] target(s) in 2.85 secs

This command also does multiple things
1. It creates an executable file in a new directory
    i. This is the target/debug directory
    ii. To run from wherever run ./target/debug/<project_name>
2. A new file called the Cargo.lock file is created
    i. This file keeps track of the exact versions of dependencies
    ii. You'll basically never manually edit this file

We can also use the following command to build and run the code

$ cargo run

This command builds and runs the code. If there's already an
executable, then it simply runs the executable. You can also
run the following command

$ cargo check

This command checks the code to make sure that it compiles
but doesn't create an executable. This is good because generally,
cargo check is faster than cargo build. You can continually check 
your work to make sure everything is compiling, then build when
you're ready to test. 

To recap ...
1. You can build a project with cargo build or cargo check
2. We can build and run using cargo run
3. The result is always saved in the target/debug directory

When the project is ready for release there is a special flag 
we can use to signify this ...

$ cargo build --release

This builds with optimizations and creates the executable in a new
directory: /target/release

These optimizations will make the executable run faster, but ultimately
increase the compile time. If you're benchmarking the speed or
handing the result to a user use the --release flag, else if you're
building and testing the code, don't bother

Cargo is a Rust convention. All substantial projects will use it.
To work on an existing Rust project, use the following commands ...

$ git clone someurl.com/someproject
$ cd someproject
$ cargo build

CHAPTER TAKEAWAYS:
- Installing the latest version of Rust
- Update to the newest Rust version
- Open locally installed documentation
- Write and run a Hello, world! program using rustc
- Create and run a project using Cargo

---------
Chapter 2
---------
In this chapter we'll be making a guessing game in Rust. We'll start 
how most projects start, by using the cargo new command

$ cargo new guessing_game

We started by writting some lines of code, we'll go over them line
by line:

1 use std::io;

This is much like a c library import to get the i/o functions required
for this game. std is the standard library and io is a sublibrary

Rust automatically brings a small selection of types into every Rust
program in what is called the prelude. If a type we need isn't in the
prelude, then we'll have to include it ourselves with a use statement

3 fn main() {

The fn declares a new function and the parens are where the parameters
go. The curly is the beginning of the function body

5 let mut guess = String::new();

This is a let statement, it's used to denote a variable. 

IN RUST, VARIABLES ARE IMMUTABLE BY DEFAULT. We'll discuss the consequences
of that in chapter 3

The mut keyword is used to make a variable mutable. guess is the name
of the mutable variable we declared

We set the guess variable to equal the result of calling the String::new 
function. This function returns a String, which is defined as a growable
UTF-8 encoded bit of text

The '::' syntax in the new line indicates that new is an associated function
of the string type. An associated function is implemented on a type, 
in this case 'String', rather than on a particular instance of a String.
Most languages refer to this as a static method

The new function is used to create an empty string. There is a new function
on a lot of types, as it's a common name for a function that makes a new
value of some kind

10 // This is a comment

much like C, this is how you make a single line comment

12 io::stdin().read_line(&mut guess)
13     .expect("Failed to read line");

Now we call the stdin function from the io module. If we didn't write the 
first line we could've also written this as..

12 std::io::stdin().read_line(&mut guess)
13     .expect("Failed to read line");

The stdin function returns an instance of the std::io:Stdin, which is a 
type that represents a handle to the standard input for your terminal

After that we have the .read_line(&mut guess). This calls the read_line
method on the standard input handle to get input from the user. This function
has an argument: &mut guess.

This function does what you think it does. It reads the user's input from
the standard input and puts it into whatever's been passed into it. This is
why the guess has to be mutable, otherwise the new string couldn't be changed

The & indicates that this arguement is a reference. References are an 
important part of how Rust works. They allow multiple parts of the code
access one piece of data without needing to copy that data into memory
multiple times (pointer?). REFERENCES ARE ALSO IMMUTABLE BY DEFAULT, so
we had to write &mut guess instead of &guess to make it mutable

The second part of this expression lies on line 13.

13 .expect("Failure to read line");

This could've all been written in one line, but it's easier on the eyes 
to simply indent here.

The read_line function puts the users input into the string it's been passed,
but it also returns a value! In this case it returns an io::Result value.

Rust has lots of types named Result in the standard library: There's a 
genereic result, as well as many specific versions for different submodules
io::Result is one of those

The Result types are enumerations, often shortened to enums. An enumeration is
a type that can have a fixed set of values, and those values of the the
enums variants. Enums are discussed at greater length in Chapter 6

For this result, the variants are Ok or Err. The Ok variant indicates 
everything went Ok with the opertaion and inside Ok is the 
successfully generated value. Eff variant indicates that the operation failed
and Err will contain information about why said operation has failed

The purpose of these Result types is to encode error-handling information
The values of the Result type, like the values of any type, have methods
defined on them. An instance of io::Result has an expect method that you can
call. If this instance of io::Result is an Err value, expect will cause
the program to crash and display the message that you passed as an argument
to expect. If the expect function gets an Ok variant of Result, then expect
will just return whatever the value Ok is holding so we can use it. In
the case of the read_line function, it's holding the number of bytes read in

If we don't call expect, the program will compile with a warning

warning: unused `std::result::Result` which must be used

Rust is saying that we haven't handled a possible error. The correct way to
suppress this error is to is to write error handling, but for now we won't
worry about that

The last line we've written is..
15 println!("You guessed: {}", guess)

The {} in the string given the println! represent a placeholder. These
act in much the same way that string formatting options do in C. This will
simply print whatever is in the second argument of println! where the {}
are

We can test what we have so far by typing

$ cargo run 

in the terminal

Now we'll work on generating the random number. While Rust
doesn't have a random number generator in the standard library
the Rust team does have a crate for this functionality.

We import this crate in the Cargo.toml file. Under dependencies
we write ...

rand = "0.3.14"

The dependencies section is used to list all of the external 
crates that the project needs to work. We specify the rand
crate cause we need the rand functionality. We also include 
a semantic version along with it, Cargo understands this.

When we build the project with a new crate, Cargo will go out
and fetch the Crate that we need from Rust.io. After the required
crates have been fetched, Rust will compile the dependencies and 
then do the project

The nice thing about Cargo is that once we've downloaded and compiled
the dependencies and compiled the code, it knows not to recompile
everything. It only recompiles and downloads what's changed

The first time you run the Cargo build command, you'll notice that
Cargo has created a Cargo.lock file. This file contains all of the
versions of dependencies and writes them in this file. Then cargo
will use the dependencies stated in the lock file, so as not to break
the code when updates come out

However, sometimes we'll want to update the crates, so we use the
following command

$ cargo update

This'll have Cargo go out and look for dependency version numbers
that are GREATER than the current PATCH NUMBER, but EQUAL TO the 
current MINOR NUMBER

So if we have a crate with version 0.3.14 and there existed two 
patches 0.3.15 and 0.4.0, then the update command will update 
the dependency to 0.3.15 and not 0.4.0 patch

If we want to use 0.4.0 we'll need to include it in the toml file

Now we'll update the main.rs file

We added a use line to add the Rng related methods to our code.
Then we use this rand::thread_rng() function to get a random number
generator from our current thread. Then we use the .gen_range() 
function to get the random number needed for our guessing game.

Now we'll add some code to compare the random number

You'll see that we have a new use directive that brings in a 
new type. The std::cmp::Ordering type is now in our scope. Ordering
is another enum, with values representing for Less, Greater,and Equal

We now have a match expression in our code. Matches are made up of
arms. An arm consists of a pattern and the code that should be run
if the value given to the beginning of the match expression fits that
arm's pattern. Rust takes the value given to match and looks through
each arm's pattern in turn. The match construct and patterns are
powerful and discussed in more detail in later chapters

The cmp method compares two values and can be called on anything that
can be compared. We called it on our guess string and are comparing it
to a reference of the random number string. This method returns a variant
of the ordering enum which match then, well, matches on. Each of the 
different orderings is linked to a specific println! outcome.

If the user guessed 60 and the random number was 48, the cmp method would
be called on guess with secret_number given as the argument. The cmp method
will return Ordering::Greater because 60 is greater than 48. The match 
expression then takes this Ordering::Greater value and starts checking each
of the arm's pattern. It'll skip by the Ordering::Less pattern, but stop on
the Ordering::Greater pattern which matches! The associated code in the 
arm will execute and print "Too big!" to the screen. Then the match expression
ends; no need to look at the other arms. 

However, this code won't compile and you might see why. We have mismatched 
types. We're comparing a string to an integer and the compiler doesn't like
that. Rust has a strong, static type system with type inference. When we
wrote

12 let mut guess = String::new();

Rust was able to infer that this guess type should be a String, so we needn't
bother with the type. The secret_number is a number types. Rust defaults to
an i32 type (A 32 bit unsigned integer).

We want to convert our String to a real number type. We'll do that by adding
some more lines to our code

20 let guess: u32 = guess.trim().parse()
21     .expect("Please type a number!");

We create a variable named guess. You might say, "Hey! We already have
a variable named guess. What gives?" In Rust we are allowed to shadow
the previous value of guess with a new one. This feature is often used
when we want to convert values from one type to another. Shadowing is
nifty because it allows us to reuse our current guess variable without
creating a new one just for the conversion. 

The guess on the right side of the expression is the original String 
guess that we obtained from the stdin().readline() method. 

We call the trim() method on this string to trim the whitespace at the 
beginning and end of the string. It also trims the newline character
'\n'. Then the parse method turns a string into a number (specified with
the u32. The colon (:) after guess tells Rust we'll annotate the variable's
type. 

This call to parse could also generate an error if the user puts some weird
shit in the guess string. So we also catch that with the expect method and
after crashing, print a little message to any users trying to undermine 
our game! 

Now we'll allow multiple guesses and loop the program!

